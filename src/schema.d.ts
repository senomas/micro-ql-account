/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  privileges: Array<string | null>;
  keychange: GQLKeychange;
  salt: string;
  login?: GQLTokenResponse;
  accounts: Array<GQLAccount | null>;
}

export interface GQLKeychange {
  key: string;
}

export interface GQLTokenResponse {
  seq: number;
  token: string;
  refresh: string;
  user?: GQLAccount;
}

export interface GQLAccount {
  id: string;
  name: string;
}

export interface GQLAccountSecurity {
  login: string;
  salt?: string;
  password: string;
  roles: Array<string | null>;
  blocked?: string;
  blockedReason?: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Keychange?: GQLKeychangeTypeResolver;
  TokenResponse?: GQLTokenResponseTypeResolver;
  Account?: GQLAccountTypeResolver;
  AccountSecurity?: GQLAccountSecurityTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  privileges?: QueryToPrivilegesResolver<TParent>;
  keychange?: QueryToKeychangeResolver<TParent>;
  salt?: QueryToSaltResolver<TParent>;
  login?: QueryToLoginResolver<TParent>;
  accounts?: QueryToAccountsResolver<TParent>;
}

export interface QueryToPrivilegesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToKeychangeArgs {
  key: string;
  token?: string;
}
export interface QueryToKeychangeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToKeychangeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSaltArgs {
  key: string;
  login: string;
  algorithm?: string;
}
export interface QueryToSaltResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSaltArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToLoginArgs {
  key: string;
  login: string;
  password: string;
  token?: string;
  forced?: boolean;
}
export interface QueryToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToLoginArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAccountsArgs {
  first: number;
}
export interface QueryToAccountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAccountsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLKeychangeTypeResolver<TParent = any> {
  key?: KeychangeToKeyResolver<TParent>;
}

export interface KeychangeToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTokenResponseTypeResolver<TParent = any> {
  seq?: TokenResponseToSeqResolver<TParent>;
  token?: TokenResponseToTokenResolver<TParent>;
  refresh?: TokenResponseToRefreshResolver<TParent>;
  user?: TokenResponseToUserResolver<TParent>;
}

export interface TokenResponseToSeqResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TokenResponseToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TokenResponseToRefreshResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TokenResponseToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAccountTypeResolver<TParent = any> {
  id?: AccountToIdResolver<TParent>;
  name?: AccountToNameResolver<TParent>;
}

export interface AccountToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AccountToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAccountSecurityTypeResolver<TParent = any> {
  login?: AccountSecurityToLoginResolver<TParent>;
  salt?: AccountSecurityToSaltResolver<TParent>;
  password?: AccountSecurityToPasswordResolver<TParent>;
  roles?: AccountSecurityToRolesResolver<TParent>;
  blocked?: AccountSecurityToBlockedResolver<TParent>;
  blockedReason?: AccountSecurityToBlockedReasonResolver<TParent>;
}

export interface AccountSecurityToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AccountSecurityToSaltResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AccountSecurityToPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AccountSecurityToRolesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AccountSecurityToBlockedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AccountSecurityToBlockedReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
