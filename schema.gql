# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddMovieInput {
  title: String!
  year: Float!
  cast: [String!]
  genres: [String!]
}

input AddRoleInput {
  code: String!
  name: String!
  description: String
  privileges: [String!]!
}

input AddUserInput {
  login: String!
  name: String!
  description: String
  roles: [String!]!
}

type Auth {
  serverKey: String!
  salt(xlogin: String!): String!
  login(expiry: Int, xhpassword: String!, xlogin: String!): Token!
}

type Commit {
  hash: String!
  abbrevHash: String!
  subject: String!
  authorName: String!
  authorDate: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DeleteResponse {
  deleted: Int!
}

input FilterMovieInput {
  id: ID
  title: String
  titleRegex: String
  year: Float
}

input FilterRoleInput {
  id: ID
  code: String
  name: String
  nameRegex: String
}

input FilterUserInput {
  id: ID
  login: String
  name: String
  nameRegex: String
}

type Movie {
  id: String!
  title: String!
  year: Float!
  cast: [String!]
  genres: [String!]
}

type Mutation {
  addUser(data: AddUserInput!): User!
  updateUsers(data: UpdateUserInput!, filter: FilterUserInput!): UpdateResponse!
  deleteUsers(filter: FilterUserInput!): DeleteResponse!
  addRole(data: AddRoleInput!): Role!
  updateRoles(data: UpdateRoleInput!, filter: FilterRoleInput!): UpdateResponse!
  deleteRoles(filter: FilterRoleInput!): DeleteResponse!
  addMovie(data: AddMovieInput!): Movie!
  updateMovies(data: UpdateMovieInput!, filter: FilterMovieInput!): UpdateResponse!
  deleteMovies(filter: FilterMovieInput!): DeleteResponse!
}

type PartialMovie {
  items: [Movie!]!
  total: Int!
}

type PartialRole {
  items: [Role!]!
  total: Int!
}

type PartialUser {
  items: [User!]!
  total: Int!
}

type Query {
  user(id: ID!): User
  users(filter: FilterUserInput, limit: Int, skip: Int): PartialUser
  role(id: ID!): Role
  roles(filter: FilterRoleInput, limit: Int, skip: Int): PartialRole
  movie(id: ID!): Movie
  movies(filter: FilterMovieInput, limit: Int, skip: Int): PartialMovie
  auth(clientKey: String!): Auth!
  logout: Boolean!
  accountInfo: ServerInfo!
  me(ts: String): UserToken
}

type Role {
  id: ID!
  code: String!
  name: String!
  description: String
  privileges: [String!]!
}

type ServerInfo {
  host: String!
  time: DateTime!
  buildTime: DateTime!
  commits: [Commit!]!
}

type Token {
  seq: String!
  token: String!
}

input UpdateMovieInput {
  title: String!
  year: Float!
  cast: [String!]
  genres: [String!]
}

type UpdateResponse {
  matched: Int
  modified: Int!
}

input UpdateRoleInput {
  code: String
  name: String
  description: String
  privileges: [String!]
}

input UpdateUserInput {
  login: String
  name: String
  description: String
  roles: [String!]
}

type User {
  id: String!
  login: String!
  name: String!
  roles: [String!]!
}

type UserToken {
  time: DateTime
  clientKey: ID
  xlogin: String
  name: String
  privileges: [String!]
  issuedAt: DateTime
  expiredAt: DateTime
  token: Token
}
