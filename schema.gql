# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @key(fields: String!) on INTERFACE | OBJECT

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

input AddMovieInput {
  cast: [String!]
  genres: [String!]
  title: String!
  year: Int!
}

input AddUserInput {
  description: String
  login: String!
  name: String!
  roles: [String!]!
}

type Auth {
  login(expiry: Int, xhpassword: String!, xlogin: String!): LoginResponse!
  salt(xlogin: String!): Salt!
  serverKey: String!
}

type AuthConfig {
  loginExpiry: Int!
  sessionExpiry: Int!
  tokenExpiry: Int!
}

type Commit {
  abbrevHash: String!
  authorDate: DateTime!
  authorName: String!
  hash: String!
  subject: String!
}

input CreateRoleInput {
  code: String!
  description: String
  name: String!
  privileges: [String!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DeleteResponse {
  deleted: Int!
}

type Error {
  name: String
  path: String
  value: String
}

input FilterMovieInput {
  id: ID
  title: String
  titleRegex: String
  year: Int
}

input FilterRoleInput {
  code: String
  id: ID
  name: String
  nameRegex: String
}

input FilterUserInput {
  id: ID
  login: String
  name: String
  nameRegex: String
}

type LoginResponse {
  errors: [Error!]
  seq: String
  token: String
}

type Movie {
  cast: [String!]
  genres: [String!]
  id: String!
  title: String!
  year: Int!
}

enum MovieField {
  id
  title
  year
}

type Mutation {
  createMovie(data: AddMovieInput!): Movie!
  createRole(data: CreateRoleInput!): Role!
  createUser(data: AddUserInput!): User!
  deleteMovies(filter: FilterMovieInput!): DeleteResponse!
  deleteRoles(filter: FilterRoleInput!): DeleteResponse!
  deleteUsers(filter: FilterUserInput!): DeleteResponse!
  logout: Boolean!
  updateMovies(data: UpdateMovieInput!, filter: FilterMovieInput!): UpdateResponse!
  updateRoles(data: UpdateRoleInput!, filter: FilterRoleInput!): UpdateResponse!
  updateUsers(data: UpdateUserInput!, filter: FilterUserInput!): UpdateResponse!
}

input OrderByMovieInput {
  field: MovieField!
  type: OrderByType!
}

input OrderByRoleInput {
  field: RoleField!
  type: OrderByType!
}

enum OrderByType {
  asc
  desc
}

input OrderByUserInput {
  field: UserField!
  type: OrderByType!
}

type PartialMovie {
  items: [Movie!]!
  total: Int!
}

type PartialRole {
  items: [Role!]!
  total: Int!
}

type PartialUser {
  items: [User!]!
  total: Int!
}

type Query {
  account: ServerInfo!
  auth(clientKey: String!): Auth!
  authConfig: AuthConfig!
  me(ts: String): UserToken
  movie(id: ID!): Movie
  movies(filter: FilterMovieInput, limit: Int, orderBy: [OrderByMovieInput!], skip: Int): PartialMovie
  role(id: ID!): Role
  roles(filter: FilterRoleInput, limit: Int, orderBy: [OrderByRoleInput!], skip: Int): PartialRole
  user(id: ID!): User
  users(filter: FilterUserInput, limit: Int, orderBy: [OrderByUserInput!], skip: Int): PartialUser
}

type Role {
  code: String!
  description: String
  id: ID!
  name: String!
  privileges: [String!]
}

enum RoleField {
  code
  id
  name
}

type Salt {
  error: Error
  value: String
}

type ServerInfo {
  buildTime: DateTime!
  commits: [Commit!]!
  errors: [Error!]
  host: String!
  time: DateTime!
}

type Token {
  errors: [Error!]
  seq: String
  value: String
}

input UpdateMovieInput {
  cast: [String!]
  genres: [String!]
  title: String!
  year: Int!
}

type UpdateResponse {
  matched: Int
  modified: Int!
}

input UpdateRoleInput {
  code: String
  description: String
  name: String
  privileges: [String!]
}

input UpdateUserInput {
  description: String
  login: String
  name: String
  roles: [String!]
}

type User {
  id: String!
  login: String!
  name: String!
  roles: [String!]!
}

enum UserField {
  id
  login
  name
}

type UserToken {
  clientKey: ID
  expiredAt: DateTime
  issuedAt: DateTime
  name: String
  privileges: [String!]
  time: DateTime
  token: Token
  xlogin: String
}
